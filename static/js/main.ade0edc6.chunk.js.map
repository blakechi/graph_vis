{"version":3,"sources":["component/GridWrapper.jsx","component/GraphSelector.jsx","component/ButtonGroup.jsx","component/SceneLegend.jsx","component/Scene.jsx","component/vx_network/brewNetworkInput.js","component/FlatGraphPlot.jsx","component/HeatMapCircle.jsx","component/StructureSimilarityHeatMap.jsx","component/ClassificationBarLegend.jsx","component/ClassificationBar.jsx","component/Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["GridWrapper","that","this","newChildren","React","Children","map","props","children","child","cloneElement","width","style","height","Component","GraphSelector","options","onChange","className","id","name","key","value","ButtonGroup","onClickLeftBtn","onClickMiddleBtn","onClickRightBtn","role","type","onClick","viewBox","fill","xmlns","d","oneDecimalFormat","format","linearScale","scaleLinear","domain","range","SceneLegend","events","LegendBox","title","scale","labelFormat","i","labels","label","LegendItem","alert","JSON","stringify","margin","r","legendGlyphSize","cx","cy","LegendLabel","align","text","Scene","handleWindowResize","window","innerWidth","mount","clientHeight","camera","aspect","updateProjectionMatrix","renderer","setSize","render","scene","controls","handleResize","init","make_scene","document","addEventListener","onDocumentMouseMove","Keyboard","animate","frameId","requestAnimationFrame","selectedGraphKey","selectedGraph","currentGraphKey","remove_scene","currentGraph","update","hover_color_update","camera2","position","copy","sub","target","setLength","CAM_DISTANCE","lookAt","scene2","render_scene","make_sphere","sphere_name","sphere_position","sphere_color","sphereGeometry","THREE","sphereMaterial","color","transparent","sphere","castShadow","targetList","push","make_edge","cylinder_name","group","sphere1_name","sphere2_name","position1","getObjectByName","clone","position2","distance","distanceTo","cylinderGeometry","cylinderMaterial","applyMatrix4","makeTranslation","makeRotationX","degToRad","cylinder","make_group","group_name","group_position","edge","sphere_data","length","toString","concat","str1","j","str2","edge_data","forEach","ele","add","make_graph","graph_group","group_data","str3","make_transition","transition_name","group1_name","group2_name","Math","floor","threshold","g","b","shininess","opacity","visible","make_output_transition","output_sphere","node_positions","color_pick","node_label","adjacency_matrix","transition_data","attention_weights","output_transition_data","cls_attention_weights","output_sphere_position","output_group_num","output_transition","transition_output_group","transition","trans_group","k","str4","graph_group_num","trans_group_num","remove","console","log","transition_output_num","event","mouse","x","clientX","clientWidth","y","clientY","error","raycaster","setFromCamera","group_num","sphere_num","intersects","intersectObjects","object","INTERSECTED","material","setHex","currentHex","spritey_name_list","pop","spritey","todoList","todoObject","makeTextSprite","parseInt","fontsize","fontface","borderColor","a","temp_position","parent","trans","str5","test_num","num","temp_num","getHex","keyCode","moveCameraToOriginal","moveCameraLeft","moveCameraRight","lookat_point","z","message","parameters","undefined","hasOwnProperty","borderThickness","backgroundColor","textColor","canvas","createElement","context","getContext","font","textWidth","measureText","fillStyle","strokeStyle","lineWidth","roundRect","fillText","texture","needsUpdate","spriteMaterial","sprite","set","ctx","w","h","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","stroke","start","stop","cancelAnimationFrame","renderer2","camera_position","rotation","camera_rotation","reset","handleLeftBtn","handleMiddleBtn","handleRightBtn","SCREEN_WIDTH","SCREEN_HEIGHT","antialias","aplpha","setPixelRatio","devicePixelRatio","setClearColor","appendChild","domElement","ASPECT","axes2","up","CANVAS_WIDTH","CANVAS_HEIGHT","alpha","axesHelper","Object","TrackballControls","minDistance","maxDistance","setAttribute","removeChild","removeEventListener","Fragment","ref","brewNetworkInput","data","width_int","height_int","nodes","pos","idx","links","src_idx","tgt_idx","source","NetworkNode","FlatGraphPlot","graph","Graph","linkComponent","DefaultLink","nodeComponent","HeatMapCircle","margin_top","margin_left","xScale","yScale","colorScale","opacityScale","radius","onHover","Group","top","left","HeatmapCircle","gap","heatmap","heatmapBins","bin","row","column","fillOpacity","e","count","onMouseEnter","leftCircleColorScale","rightCircleColorScale","generateBin","reverse","row_idx","bins","col","col_idx","defaultMargin","right","bottom","StructureSimilarityHeatMap","leftData","rightData","separation","_width","_height","heatMapWidth","leftBins","rightBins","xMax","yMax","min","rx","ClassificationBarLegend","ordinalColorScale","scaleOrdinal","toUpperCase","display","flexDirection","green","barColor","keys","formatGraphClass","graphClass","getGraphClass","x1Scale","scaleBand","padding","ClassificationBar","y_hat","y_logit","generateBarData","x0Scale","rangeRound","bandwidth","BarGroup","x0","barGroups","barGroup","bars","bar","index","AxisBottom","tickFormat","tickStroke","hideAxisLine","tickLabelProps","fontSize","textAnchor","AutoWidthGridLayout","WidthProvider","GridLayout","Grid","state","layout","static","minW","maxW","minH","maxH","graphKeys","onChangeGraphSelector","cols","rowHeight","compactType","verticalCompact","struct_similarity","App","currentTarget","setState","Graphs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ade0edc6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass GridWrapper extends Component {\n    render() {\n        var that = this;\n        var newChildren = React.Children.map(this.props.children, function (child) {\n            return React.cloneElement(child, {\n                width: that.props.style.width,\n                height: that.props.style.height,\n            });\n        });\n        return <div {...this.props}>{newChildren}</div>;\n    }\n}\n\nexport default GridWrapper;\n","import \"../css/GraphSelector.css\";\n\nconst GraphSelector = ({ options, onChange }) => {\n    return (\n        <div className=\"selector-box\">\n            <div className=\"title\">Graph</div>\n            <select\n                className=\"custom-select\"\n                id=\"groupSelect\"\n                name=\"groupSelect\"\n                onChange={onChange}\n            >\n                {options.map((key) => (\n                    <option key={key} value={key}>\n                        {key}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default GraphSelector;\n","import React from \"react\";\nimport \"../css/ButtonGroup.css\";\n\nconst ButtonGroup = ({ onClickLeftBtn, onClickMiddleBtn, onClickRightBtn }) => {\n    return (\n        <div className=\"btn-group btn-group-lg\" role=\"group\" id=\"button-group\">\n            <button type=\"button\" className=\"view-btn btn\" onClick={onClickLeftBtn}>\n                <svg\n                    width=\"1.5em\"\n                    height=\"1.5em\"\n                    viewBox=\"0 0 16 16\"\n                    className=\"bi bi-caret-left-fill\"\n                    fill=\"white\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path d=\"M3.86 8.753l5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z\" />\n                </svg>\n            </button>\n            <button type=\"button\" className=\"view-btn btn\" onClick={onClickMiddleBtn}>\n                <svg\n                    width=\"1.5em\"\n                    height=\"1.5em\"\n                    viewBox=\"0 0 16 16\"\n                    className=\"bi bi-align-center\"\n                    fill=\"white\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path d=\"M8 1a.5.5 0 0 1 .5.5V6h-1V1.5A.5.5 0 0 1 8 1zm0 14a.5.5 0 0 1-.5-.5V10h1v4.5a.5.5 0 0 1-.5.5zM2 7a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7z\" />\n                </svg>\n            </button>\n            <button type=\"button\" className=\"view-btn btn\" onClick={onClickRightBtn}>\n                <svg\n                    width=\"1.5em\"\n                    height=\"1.5em\"\n                    viewBox=\"0 0 16 16\"\n                    className=\"bi bi-caret-right-fill\"\n                    fill=\"white\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path d=\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\" />\n                </svg>\n            </button>\n        </div>\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { format } from \"d3-format\";\nimport { scaleLinear } from \"@vx/scale\";\nimport { LegendLinear, LegendItem, LegendLabel } from \"@vx/legend\";\nimport \"../css/Legend.css\";\n\nconst oneDecimalFormat = format(\".1f\");\nconst legendGlyphSize = 15;\nconst linearScale = scaleLinear({\n    domain: [0, 1.0],\n    range: [\"#FF7D00\", \"#FF0000\"],\n});\n\nexport default function SceneLegend({ events = false }) {\n    return (\n        <div className=\"legend-position\">\n            <LegendBox title=\"Attention\">\n                <LegendLinear\n                    scale={linearScale}\n                    labelFormat={(d, i) => (i % 2 === 0 ? oneDecimalFormat(d) : \"\")}\n                >\n                    {(labels) =>\n                        labels.map((label, i) => (\n                            <LegendItem\n                                key={`legend-quantile-${i}`}\n                                onClick={() => {\n                                    if (events) alert(`clicked: ${JSON.stringify(label)}`);\n                                }}\n                            >\n                                <svg\n                                    width={legendGlyphSize}\n                                    height={legendGlyphSize}\n                                    style={{ margin: \"2px 0\" }}\n                                >\n                                    <circle\n                                        fill={label.value}\n                                        r={legendGlyphSize / 2}\n                                        cx={legendGlyphSize / 2}\n                                        cy={legendGlyphSize / 2}\n                                    />\n                                </svg>\n                                <LegendLabel align=\"left\" margin=\"0 4px\">\n                                    {label.text}\n                                </LegendLabel>\n                            </LegendItem>\n                        ))\n                    }\n                </LegendLinear>\n            </LegendBox>\n        </div>\n    );\n}\n\nfunction LegendBox({ title, children }) {\n    return (\n        <div className=\"legend-box\">\n            <div className=\"title\">{title}</div>\n            {children}\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport TrackballControls from \"three-trackballcontrols\";\r\n\r\nimport GraphSelector from \"./GraphSelector\";\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport SceneLegend from \"./SceneLegend\";\r\nimport \"../css/Scene.css\";\r\n\r\nclass Scene extends Component {\r\n    componentDidMount() {\r\n        const { selectedGraphKey, selectedGraph } = this.props;\r\n        this.currentGraphKey = selectedGraphKey;\r\n        this.currentGraph = selectedGraph;\r\n        this.color_pick = [\"rgb(0,0,254)\", \"rgb(0,204,0)\", \"rgb(102,0,204)\"];\r\n\r\n        //transition visible var\r\n        this.threshold = 0.0;\r\n\r\n        //name var\r\n        this.str1 = \"node\";\r\n        this.str2 = \"edge\";\r\n        this.str3 = \"group\";\r\n        this.str4 = \"tran\";\r\n        this.str5 = \"spritey\";\r\n\r\n        const SCREEN_WIDTH = window.innerWidth - 20; // Seems that this.mount.clientWidth won't update immediately\r\n        const SCREEN_HEIGHT = this.mount.clientHeight; // Grid Height\r\n\r\n        this.scene = new THREE.Scene();\r\n\r\n        //Add Renderer\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, aplpha: false });\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\r\n        this.renderer.setClearColor(0x000000, 1);\r\n        // this.renderer.gammaInput = true;\r\n        // this.renderer.gammaOutput = true;\r\n        this.mount.appendChild(this.renderer.domElement);\r\n\r\n        //this.camera var\r\n        var VIEW_ANGLE = 45;\r\n        var ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT;\r\n        var NEAR = 0.1;\r\n        var FAR = 20000;\r\n        this.lookat_point = new THREE.Vector3();\r\n\r\n        //basic var\r\n        this.camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n        this.scene.add(this.camera);\r\n        this.camera.position.set(0, 150, 1200);\r\n        this.camera.lookAt(this.scene.position);\r\n        this.lookat_point = this.scene.position;\r\n        this.camera_position = this.camera.position.clone();\r\n        this.camera_rotation = this.camera.rotation.clone();\r\n\r\n        //group var\r\n        this.trans_group = new THREE.Group();\r\n        this.graph_group = new THREE.Group();\r\n\r\n        //ray casting var\r\n        this.INTERSECTED = null;\r\n        this.spritey = null;\r\n        this.spritey_name_list = [];\r\n        this.targetList = [];\r\n        this.todoList = [];\r\n        this.raycaster = new THREE.Raycaster(); // create once\r\n        this.mouse = new THREE.Vector2(); // create once\r\n        this.trans = new THREE.Vector3(0, 0, 80);\r\n\r\n        //for this.scene2 var\r\n        this.scene2 = new THREE.Scene();\r\n        this.axes2 = new THREE.AxesHelper(300);\r\n        this.scene2.add(this.axes2);\r\n        this.camera2 = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n        this.camera2.up = this.camera.up; // important!;\r\n        this.CANVAS_WIDTH = SCREEN_WIDTH * 0.2;\r\n        this.CANVAS_HEIGHT = SCREEN_HEIGHT * 0.2;\r\n\r\n        this.CAM_DISTANCE = 1000;\r\n        this.renderer2 = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.renderer2.setClearColor(0x000000, 0);\r\n        this.renderer2.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer2.setSize(this.CANVAS_WIDTH, this.CANVAS_HEIGHT);\r\n        this.axesHelper.appendChild(this.renderer2.domElement);\r\n\r\n        //data var: sphere_data, edge_data, group_data, transition_data\r\n        this.sphere_data = [];\r\n        this.edge_data = [];\r\n        this.transition_data = [];\r\n\r\n        this.group_data = [\r\n            new THREE.Vector3(-750, 0, 0),\r\n            new THREE.Vector3(-250, 0, 0),\r\n            new THREE.Vector3(250, 0, 0),\r\n            new THREE.Vector3(750, 0, 0),\r\n        ];\r\n\r\n        this.output_transition_data = [];\r\n        this.output_sphere = Object();\r\n        this.transition_output_group = new THREE.Group();\r\n\r\n        this.controls = new TrackballControls(this.camera, this.renderer.domElement);\r\n        this.controls.minDistance = 100.1;\r\n        this.controls.maxDistance = 10000.5;\r\n\r\n        this.init();\r\n        this.animate();\r\n\r\n        window.addEventListener(\"resize\", this.handleWindowResize);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.mount.setAttribute(\"clientWidth\", window.innerWidth - 20);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n        this.mount.removeChild(this.renderer.domElement);\r\n\r\n        window.removeEventListener(\"resize\", this.handleWindowResize);\r\n    }\r\n\r\n    handleWindowResize = () => {\r\n        // from https://stackoverflow.com/questions/29884485/threejs-canvas-size-based-on-container\r\n        const width = window.innerWidth - 20;\r\n        const height = this.mount.clientHeight;\r\n        // console.log(window.innerWidth, this.props.width, this.mount.clientWidth);\r\n\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize(width, height);\r\n        this.renderer.render(this.scene, this.camera);\r\n        this.controls.handleResize();\r\n    };\r\n\r\n    init = () => {\r\n        this.make_scene();\r\n        document.addEventListener(\"mousemove\", this.onDocumentMouseMove, false);\r\n        document.addEventListener(\"keydown\", this.Keyboard, false);\r\n        // var sphere_position = new THREE.Vector3(100, 50, -50);\r\n        // var sphere = make_sphere(0x8888ff,\"sphere1\",sphere_position);\r\n        // this.scene.add(sphere);\r\n        // var group = make_group((0,0,0));\r\n        // this.scene.add(group);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        const { selectedGraphKey, selectedGraph } = this.props;\r\n        if (this.currentGraphKey !== selectedGraphKey) {\r\n            this.remove_scene();\r\n            this.currentGraphKey = selectedGraphKey;\r\n            this.currentGraph = selectedGraph;\r\n            this.make_scene();\r\n        }\r\n\r\n        this.controls.update();\r\n        this.hover_color_update();\r\n        this.camera2.position.copy(this.camera.position);\r\n        this.camera2.position.sub(this.controls.target); // added by @libe\r\n        this.camera2.position.setLength(this.CAM_DISTANCE);\r\n        this.camera2.lookAt(this.scene2.position);\r\n        this.render_scene();\r\n    };\r\n\r\n    make_sphere = (sphere_name, sphere_position, sphere_color) => {\r\n        var sphereGeometry = new THREE.SphereGeometry(12, 32, 16);\r\n        var sphereMaterial = new THREE.MeshBasicMaterial({ color: sphere_color });\r\n        sphereMaterial.transparent = true;\r\n        var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        sphere.name = sphere_name;\r\n        sphere.position.copy(sphere_position);\r\n        sphere.castShadow = true;\r\n        this.targetList.push(sphere);\r\n        return sphere;\r\n    };\r\n\r\n    make_edge = (cylinder_name, group, sphere1_name, sphere2_name, value) => {\r\n        var position1 = group.getObjectByName(sphere1_name).position.clone();\r\n        var position2 = group.getObjectByName(sphere2_name).position.clone();\r\n        var distance = position1.distanceTo(position2);\r\n        var cylinderGeometry = new THREE.CylinderGeometry(2, 2, distance, 32);\r\n        var cylinderMaterial = new THREE.MeshBasicMaterial({\r\n            color: \"rgb(125,125,125)\",\r\n        });\r\n        cylinderMaterial.transparent = true;\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, distance / 2, 0));\r\n        // rotate it the right way for lookAt to work\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeRotationX(THREE.Math.degToRad(90)));\r\n        // Make a mesh with the geometry\r\n        var cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);\r\n        // Position it where we want\r\n        cylinder.position.copy(position1);\r\n        // And make it point to where we want\r\n        cylinder.lookAt(position2);\r\n\r\n        // cylinder.position.copy(center);\r\n        cylinder.castShadow = true;\r\n        cylinder.name = cylinder_name;\r\n        // console.log(cylinder);\r\n        // targetList.push(cylinder);\r\n\r\n        return cylinder;\r\n    };\r\n\r\n    make_group = (group_name, group_position) => {\r\n        var group = new THREE.Group();\r\n\r\n        var sphere = [];\r\n        var edge = [];\r\n\r\n        for (let i = 0; i < this.sphere_data.length; i++) {\r\n            sphere.push([\r\n                i.toString().concat(this.str1),\r\n                this.sphere_data[i][0],\r\n                this.sphere_data[i][1],\r\n            ]);\r\n            for (let j = i; j < this.sphere_data.length; j++) {\r\n                edge.push([\r\n                    (i * this.sphere_data.length + j).toString().concat(this.str2),\r\n                    i.toString().concat(this.str1),\r\n                    j.toString().concat(this.str1),\r\n                    this.edge_data[i][j],\r\n                ]);\r\n            }\r\n        }\r\n\r\n        sphere.forEach((ele) => group.add(this.make_sphere(ele[0], ele[1], ele[2])));\r\n\r\n        edge.forEach((ele) => {\r\n            if (ele[3] === 1) {\r\n                group.add(this.make_edge(ele[0], group, ele[1], ele[2], ele[3]));\r\n            }\r\n        });\r\n\r\n        group.position.copy(group_position);\r\n        group.name = group_name;\r\n        // console.log(group);\r\n        // console.log(group.children[0]);\r\n        return group;\r\n    };\r\n\r\n    make_graph = () => {\r\n        var group = [];\r\n        this.graph_group.name = \"graph_group\";\r\n        for (let i = 0; i < this.group_data.length; i++) {\r\n            group.push([i.toString().concat(this.str3), this.group_data[i]]);\r\n        }\r\n\r\n        group.map((ele) => this.graph_group.add(this.make_group(ele[0], ele[1])));\r\n        // console.log(graph_group);\r\n        this.scene.add(this.graph_group);\r\n    };\r\n\r\n    make_transition = (\r\n        transition_name,\r\n        group1_name,\r\n        group2_name,\r\n        sphere1_name,\r\n        sphere2_name,\r\n        value\r\n    ) => {\r\n        if (value > 1.0) value = 1.0;\r\n        //color\r\n        var ar = 255,\r\n            ag = 128,\r\n            ab = 0,\r\n            br = 255,\r\n            bg = 0,\r\n            bb = 0;\r\n\r\n        var r = Math.floor(((br - ar) * (value - this.threshold)) / (1 - this.threshold) + ar);\r\n        var g = Math.floor(((bg - ag) * (value - this.threshold)) / (1 - this.threshold) + ag);\r\n        var b = Math.floor(((bb - ab) * (value - this.threshold)) / (1 - this.threshold) + ab);\r\n\r\n        var color1 = \"rgb(\";\r\n        var append1 = \",\";\r\n        var append2 = \")\";\r\n        var color = color1.concat(\r\n            r.toString(),\r\n            append1,\r\n            g.toString(),\r\n            append1,\r\n            b.toString(),\r\n            append2\r\n        );\r\n        var position1 = this.scene\r\n            .getObjectByName(group1_name)\r\n            .getObjectByName(sphere1_name)\r\n            .position.clone();\r\n        var position2 = this.scene\r\n            .getObjectByName(group2_name)\r\n            .getObjectByName(sphere2_name)\r\n            .position.clone();\r\n        position1.add(this.scene.getObjectByName(group1_name).position);\r\n        position2.add(this.scene.getObjectByName(group2_name).position);\r\n        var distance = position1.distanceTo(position2);\r\n        var cylinderGeometry = new THREE.CylinderGeometry(2, 2, distance, 32);\r\n        var cylinderMaterial = new THREE.MeshBasicMaterial({\r\n            color: color,\r\n        });\r\n        cylinderMaterial.shininess = 50;\r\n        cylinderMaterial.transparent = true;\r\n        cylinderMaterial.opacity = 0.5;\r\n\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, distance / 2, 0));\r\n        // rotate it the right way for lookAt to work\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeRotationX(THREE.Math.degToRad(90)));\r\n        // Make a mesh with the geometry\r\n        var cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);\r\n        // Position it where we want\r\n        cylinder.position.copy(position1);\r\n        // And make it point to where we want\r\n        cylinder.lookAt(position2);\r\n\r\n        // cylinder.position.copy(center);\r\n        cylinder.castShadow = true;\r\n        cylinder.name = transition_name;\r\n        cylinder.visible = false;\r\n        // console.log(cylinder);\r\n        // targetList.push(cylinder);\r\n\r\n        return cylinder;\r\n    };\r\n\r\n    make_output_transition = (transition_name, group_name, sphere_name, value) => {\r\n        if (value > 1.0) value = 1.0;\r\n        //color\r\n        var ar = 255,\r\n            ag = 128,\r\n            ab = 0,\r\n            br = 255,\r\n            bg = 0,\r\n            bb = 0;\r\n\r\n        var r = Math.floor(((br - ar) * (value - this.threshold)) / (1 - this.threshold) + ar);\r\n        var g = Math.floor(((bg - ag) * (value - this.threshold)) / (1 - this.threshold) + ag);\r\n        var b = Math.floor(((bb - ab) * (value - this.threshold)) / (1 - this.threshold) + ab);\r\n\r\n        var color1 = \"rgb(\";\r\n        var append1 = \",\";\r\n        var append2 = \")\";\r\n        var color = color1.concat(\r\n            r.toString(),\r\n            append1,\r\n            g.toString(),\r\n            append1,\r\n            b.toString(),\r\n            append2\r\n        );\r\n        var position1 = this.scene\r\n            .getObjectByName(group_name)\r\n            .getObjectByName(sphere_name)\r\n            .position.clone();\r\n        var position2 = this.output_sphere.position.clone();\r\n        position1.add(this.scene.getObjectByName(group_name).position);\r\n\r\n        var distance = position1.distanceTo(position2);\r\n        var cylinderGeometry = new THREE.CylinderGeometry(2, 2, distance, 32);\r\n        var cylinderMaterial = new THREE.MeshBasicMaterial({\r\n            color: color,\r\n        });\r\n        cylinderMaterial.shininess = 50;\r\n        cylinderMaterial.transparent = true;\r\n\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, distance / 2, 0));\r\n        // rotate it the right way for lookAt to work\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeRotationX(THREE.Math.degToRad(90)));\r\n        // Make a mesh with the geometry\r\n        var cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);\r\n        // Position it where we want\r\n        cylinder.position.copy(position1);\r\n        // And make it point to where we want\r\n        cylinder.lookAt(position2);\r\n\r\n        // cylinder.position.copy(center);\r\n        cylinder.castShadow = true;\r\n        cylinder.name = transition_name;\r\n        cylinder.visible = false;\r\n\r\n        return cylinder;\r\n    };\r\n\r\n    make_scene = () => {\r\n        for (let i = 0; i < this.currentGraph.node_positions.length; i++) {\r\n            this.sphere_data.push([\r\n                new THREE.Vector3(\r\n                    (this.currentGraph.node_positions[i][0] - 0.5) * 400,\r\n                    (this.currentGraph.node_positions[i][1] - 0.5) * 400,\r\n                    (this.currentGraph.node_positions[i][2] - 0.5) * 400\r\n                ),\r\n                this.color_pick[this.currentGraph.node_label[i]],\r\n            ]);\r\n        }\r\n        this.edge_data = this.currentGraph.adjacency_matrix;\r\n        this.transition_data = this.currentGraph.attention_weights;\r\n\r\n        this.make_graph();\r\n        this.output_transition_data = this.currentGraph.cls_attention_weights;\r\n\r\n        var output_sphere_position = new THREE.Vector3(0, 250, 0);\r\n        output_sphere_position.add(this.group_data[3]);\r\n        var sphereGeometry = new THREE.SphereGeometry(24, 32, 16);\r\n        var sphereMaterial = new THREE.MeshBasicMaterial({ color: \"rgb(255,255,255)\" });\r\n        sphereMaterial.transparent = true;\r\n        this.output_sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        this.output_sphere.name = \"output_sphere\";\r\n        this.output_sphere.position.copy(output_sphere_position);\r\n        this.scene.add(this.output_sphere);\r\n        this.targetList.push(this.output_sphere);\r\n\r\n        var output_group_num = this.group_data.length - 2;\r\n        for (let i = 0; i < this.sphere_data.length; i++) {\r\n            if (this.output_transition_data[i] > this.threshold) {\r\n                var output_transition = this.make_output_transition(\r\n                    i.toString().concat(\"output_transition\"),\r\n                    output_group_num.toString().concat(this.str3),\r\n                    i.toString().concat(this.str1),\r\n                    this.output_transition_data[i]\r\n                );\r\n                this.transition_output_group.add(output_transition);\r\n            }\r\n        }\r\n        this.scene.add(this.transition_output_group);\r\n\r\n        var transition = [];\r\n        this.trans_group.name = \"this.trans_group\";\r\n        for (let i = 0; i < this.group_data.length - 1; i++) {\r\n            for (let j = 0; j < this.sphere_data.length; j++) {\r\n                for (let k = 0; k < this.sphere_data.length; k++) {\r\n                    transition.push([\r\n                        (\r\n                            i * this.sphere_data.length * this.sphere_data.length +\r\n                            j * this.sphere_data.length +\r\n                            k\r\n                        )\r\n                            .toString()\r\n                            .concat(this.str4),\r\n                        i.toString().concat(this.str3),\r\n                        (i + 1).toString().concat(this.str3),\r\n                        j.toString().concat(this.str1),\r\n                        k.toString().concat(this.str1),\r\n                        this.transition_data[i][j][k],\r\n                    ]);\r\n                }\r\n            }\r\n        }\r\n\r\n        transition.forEach((ele) => {\r\n            if (ele[5] > this.threshold) {\r\n                this.trans_group.add(\r\n                    this.make_transition(ele[0], ele[1], ele[2], ele[3], ele[4], ele[5])\r\n                );\r\n            }\r\n        });\r\n\r\n        this.scene.add(this.trans_group);\r\n    };\r\n\r\n    remove_scene = () => {\r\n        var graph_group_num = this.graph_group.children[0].children.length;\r\n        var trans_group_num = this.trans_group.children.length;\r\n        for (let i = 0; i < this.group_data.length; i++) {\r\n            for (let j = 0; j < graph_group_num; j++) {\r\n                this.graph_group.children[0].remove(this.graph_group.children[0].children[0]);\r\n                console.log(\"finished sphere and edge\");\r\n            }\r\n            this.graph_group.remove(this.graph_group.children[0]);\r\n            console.log(\"finished\");\r\n        }\r\n        this.scene.remove(this.graph_group);\r\n        for (let i = 0; i < trans_group_num; i++) {\r\n            this.trans_group.remove(this.trans_group.children[0]);\r\n        }\r\n        this.scene.remove(this.trans_group);\r\n        var transition_output_num = this.transition_output_group.children.length;\r\n        for (let i = 0; i < transition_output_num; i++) {\r\n            this.transition_output_group.remove(this.transition_output_group.children[0]);\r\n        }\r\n        this.scene.remove(this.transition_output_group);\r\n        this.output_transition_data = [];\r\n        this.sphere_data = [];\r\n        this.edge_data = [];\r\n        this.transition_data = [];\r\n        this.targetList = [];\r\n    };\r\n\r\n    //mouse action\r\n    onDocumentMouseMove = (event) => {\r\n        // the following line would stop any other event handler from firing\r\n        // (such as the mouse's TrackballControls)\r\n        // event.preventDefault();\r\n        // const width = window.innerWidth - 20;\r\n        // const height = this.mount.clientHeight;\r\n        // update the mouse variable\r\n        // const offset_y = window.innerHeight - this.mount.clientHeight;\r\n        try {\r\n            this.mouse.x = ((event.clientX - 10) / this.mount.clientWidth) * 2 - 1;\r\n            this.mouse.y = -((event.clientY - 10) / this.mount.clientHeight) * 2 + 1;\r\n        } catch (error) {}\r\n    };\r\n\r\n    hover_color_update = () => {\r\n        // find intersections\r\n\r\n        // create a Ray with origin at the mouse position\r\n        //   and direction into the this.scene (this.camera direction)\r\n        // raycaster = new THREE.Raycaster();\r\n\r\n        // create an array containing all objects in the this.scene with which the ray intersects\r\n        this.raycaster.setFromCamera(this.mouse, this.camera);\r\n        var intersects = this.raycaster.intersectObjects(this.targetList);\r\n\r\n        // INTERSECTED = the object in the this.scene currently closest to the this.camera\r\n        //\t\tand intersected by the Ray projected from the mouse position\r\n\r\n        // if there is one (or more) intersections\r\n        var group_num, sphere_num;\r\n        if (intersects.length > 0) {\r\n            // if the closest object intersected is not the currently stored intersection object\r\n            if (intersects[0].object !== this.INTERSECTED) {\r\n                // restore previous intersection object (if it exists) to its original color\r\n                if (this.INTERSECTED) {\r\n                    // if(INTERSECTED.geometry.type===\"SphereGeometry\")\r\n                    // {\r\n                    //reset\r\n                    this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\r\n                    for (let i = 0; i < this.group_data.length; i++) {\r\n                        for (let j = 0; j < this.graph_group.children[i].children.length; j++) {\r\n                            this.graph_group.children[i].children[j].material.opacity = 1.0;\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < this.trans_group.children.length; i++) {\r\n                        this.trans_group.children[i].visible = false;\r\n                    }\r\n                    for (let i = 0; i < this.transition_output_group.children.length; i++) {\r\n                        this.transition_output_group.children[i].visible = false;\r\n                    }\r\n                    while (this.spritey_name_list.length !== 0) {\r\n                        this.scene.remove(\r\n                            this.scene.getObjectByName(\r\n                                this.spritey_name_list[this.spritey_name_list.length - 1]\r\n                            )\r\n                        );\r\n                        this.spritey_name_list.pop();\r\n                    }\r\n                    this.spritey = null;\r\n                }\r\n                // store reference to closest object as current intersection object\r\n\r\n                this.INTERSECTED = intersects[0].object;\r\n                if (this.INTERSECTED !== this.output_sphere) {\r\n                    //set everything to low opacity state\r\n                    for (let i = 0; i < this.group_data.length; i++) {\r\n                        for (let j = 0; j < this.graph_group.children[i].children.length; j++) {\r\n                            this.graph_group.children[i].children[j].material.opacity = 0.33;\r\n                        }\r\n                    }\r\n\r\n                    //get object that want to be stand out (transition and origin)\r\n                    this.todoList.push(this.INTERSECTED);\r\n                    // console.log(INTERSECTED);\r\n                    while (this.todoList.length !== 0) {\r\n                        var todoObject = this.todoList[this.todoList.length - 1];\r\n                        this.todoList.pop();\r\n\r\n                        this.spritey = this.makeTextSprite(parseInt(todoObject.name).toString(), {\r\n                            fontsize: 75,\r\n                            fontface: \"Georgia\",\r\n                            borderColor: { r: 0, g: 0, b: 255, a: 1.0 },\r\n                        });\r\n                        var temp_position = todoObject.position.clone();\r\n                        temp_position.add(todoObject.parent.position);\r\n                        this.spritey.position.copy(temp_position);\r\n                        this.spritey.position.add(this.trans);\r\n                        this.spritey.name = todoObject.name.concat(this.str5);\r\n                        this.spritey_name_list.push(this.spritey.name);\r\n                        // console.log(spritey);\r\n                        this.scene.add(this.spritey);\r\n\r\n                        todoObject.material.opacity = 1.0;\r\n                        sphere_num = parseInt(todoObject.name);\r\n                        group_num = parseInt(todoObject.parent.name);\r\n                        // console.log(sphere_num,group_num);\r\n                        if (group_num !== 0) {\r\n                            for (let i = 0; i < this.trans_group.children.length; i++) {\r\n                                var test_num =\r\n                                    parseInt(this.trans_group.children[i].name) -\r\n                                    (group_num - 1) *\r\n                                        this.sphere_data.length *\r\n                                        this.sphere_data.length;\r\n                                if (\r\n                                    test_num % this.sphere_data.length === sphere_num &&\r\n                                    test_num < this.sphere_data.length * this.sphere_data.length &&\r\n                                    test_num > 0\r\n                                ) {\r\n                                    // console.log(test_num);\r\n                                    // this.trans_group.children[i].material.opacity = 1.0;\r\n                                    this.trans_group.children[i].visible = true;\r\n                                    var num = Math.floor(test_num / this.sphere_data.length);\r\n                                    // console.log(graph_group.children[(group_num-1)].children[num]);\r\n                                    this.todoList.push(\r\n                                        this.graph_group.children[group_num - 1].children[num]\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //set object connection in its own graph\r\n                    sphere_num = parseInt(this.INTERSECTED.name);\r\n                    group_num = parseInt(this.INTERSECTED.parent.name);\r\n                    var temp_num;\r\n                    for (let i = 0; i < this.group_data.length; i++) {\r\n                        if (i === group_num) {\r\n                            for (let j = 0; j < this.sphere_data.length; j++) {\r\n                                if (j !== sphere_num) {\r\n                                    this.INTERSECTED.parent.children[j].material.opacity = 0.33;\r\n                                }\r\n                            }\r\n                            for (\r\n                                let j = this.sphere_data.length;\r\n                                j < this.INTERSECTED.parent.children.length;\r\n                                j++\r\n                            ) {\r\n                                if (\r\n                                    parseInt(this.INTERSECTED.parent.children[j].name) %\r\n                                        this.sphere_data.length ===\r\n                                    sphere_num\r\n                                ) {\r\n                                    temp_num = Math.floor(\r\n                                        parseInt(this.INTERSECTED.parent.children[j].name) /\r\n                                            this.sphere_data.length\r\n                                    );\r\n                                    this.INTERSECTED.parent.children[\r\n                                        temp_num\r\n                                    ].material.opacity = 1.0;\r\n                                    this.INTERSECTED.parent.children[j].material.opacity = 1.0;\r\n                                } else if (\r\n                                    Math.floor(\r\n                                        parseInt(this.INTERSECTED.parent.children[j].name) /\r\n                                            this.sphere_data.length\r\n                                    ) === sphere_num\r\n                                ) {\r\n                                    temp_num =\r\n                                        parseInt(this.INTERSECTED.parent.children[j].name) %\r\n                                        this.sphere_data.length;\r\n                                    this.INTERSECTED.parent.children[\r\n                                        temp_num\r\n                                    ].material.opacity = 1.0;\r\n                                    this.INTERSECTED.parent.children[j].material.opacity = 1.0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < this.group_data.length; i++) {\r\n                        for (let j = 0; j < this.graph_group.children[i].children.length; j++) {\r\n                            this.graph_group.children[i].children[j].material.opacity = 0.33;\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < this.transition_output_group.children.length; i++) {\r\n                        this.transition_output_group.children[i].visible = true;\r\n                        var sphere = this.graph_group.children[2].children[\r\n                            parseInt(this.transition_output_group.children[i].name)\r\n                        ];\r\n                        sphere.material.opacity = 1.0;\r\n                        this.spritey = this.makeTextSprite(\r\n                            parseInt(this.transition_output_group.children[i].name).toString(),\r\n                            {\r\n                                fontsize: 75,\r\n                                fontface: \"Georgia\",\r\n                                borderColor: { r: 0, g: 0, b: 255, a: 1.0 },\r\n                            }\r\n                        );\r\n                        temp_position = sphere.position.clone();\r\n                        temp_position.add(sphere.parent.position);\r\n                        this.spritey.position.copy(temp_position);\r\n                        this.spritey.position.add(this.trans);\r\n                        this.spritey.name = sphere.name.concat(this.str5);\r\n                        this.spritey_name_list.push(this.spritey.name);\r\n                        // console.log(spritey);\r\n                        this.scene.add(this.spritey);\r\n                    }\r\n                }\r\n\r\n                //set itself to a highlight color\r\n                // store color of closest object (for later restoration)\r\n                this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\r\n                // set a new color for closest object\r\n                this.INTERSECTED.material.color.setHex(0xfc4ad9);\r\n            }\r\n        } // there are no intersections\r\n        else {\r\n            // restore previous intersection object (if it exists) to its original color\r\n            if (this.INTERSECTED) {\r\n                // if(INTERSECTED.geometry.type===\"SphereGeometry\")\r\n                // {\r\n                //reset\r\n                this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\r\n                for (let i = 0; i < this.group_data.length; i++) {\r\n                    for (let j = 0; j < this.graph_group.children[i].children.length; j++) {\r\n                        this.graph_group.children[i].children[j].material.opacity = 1.0;\r\n                    }\r\n                }\r\n                for (let i = 0; i < this.trans_group.children.length; i++) {\r\n                    this.trans_group.children[i].visible = false;\r\n                }\r\n                for (let i = 0; i < this.transition_output_group.children.length; i++) {\r\n                    this.transition_output_group.children[i].visible = false;\r\n                }\r\n                while (this.spritey_name_list.length !== 0) {\r\n                    this.scene.remove(\r\n                        this.scene.getObjectByName(\r\n                            this.spritey_name_list[this.spritey_name_list.length - 1]\r\n                        )\r\n                    );\r\n                    this.spritey_name_list.pop();\r\n                }\r\n                this.spritey = null;\r\n            }\r\n            // remove previous intersection object reference\r\n            //     by setting current intersection object to \"nothing\"\r\n            this.INTERSECTED = null;\r\n        }\r\n    };\r\n\r\n    Keyboard = (event) => {\r\n        if (event.keyCode === 72) {\r\n            this.moveCameraToOriginal();\r\n        }\r\n        //A x-left\r\n        if (event.keyCode === 65) {\r\n            this.moveCameraLeft();\r\n        }\r\n        //D x-right\r\n        if (event.keyCode === 68) {\r\n            this.moveCameraRight();\r\n        }\r\n        //W y-up\r\n        if (event.keyCode === 87) {\r\n            this.camera.position.y = this.camera.position.y + 100;\r\n            this.lookat_point.y = this.lookat_point.y - 100;\r\n            this.camera.lookAt(this.lookat_point);\r\n        }\r\n        //S y-down\r\n        if (event.keyCode === 83) {\r\n            this.camera.position.y = this.camera.position.y - 100;\r\n            this.lookat_point.y = this.lookat_point.y + 100;\r\n            this.camera.lookAt(this.lookat_point);\r\n        }\r\n        //N -come near\r\n        if (event.keyCode === 78) {\r\n            this.camera.position.z = this.camera.position.z + 100;\r\n            this.lookat_point.z = this.lookat_point.z - 100;\r\n            this.camera.lookAt(this.lookat_point);\r\n        }\r\n        //M -go far\r\n        if (event.keyCode === 77) {\r\n            this.camera.position.z = this.camera.position.z - 100;\r\n            this.lookat_point.z = this.lookat_point.z + 100;\r\n            this.camera.lookAt(this.lookat_point);\r\n        }\r\n    };\r\n\r\n    makeTextSprite = (message, parameters) => {\r\n        if (parameters === undefined) parameters = {};\r\n        var fontface = parameters.hasOwnProperty(\"fontface\") ? parameters[\"fontface\"] : \"Arial\";\r\n        var fontsize = parameters.hasOwnProperty(\"fontsize\") ? parameters[\"fontsize\"] : 18;\r\n        var borderThickness = parameters.hasOwnProperty(\"borderThickness\")\r\n            ? parameters[\"borderThickness\"]\r\n            : 4;\r\n        var borderColor = parameters.hasOwnProperty(\"borderColor\")\r\n            ? parameters[\"borderColor\"]\r\n            : { r: 0, g: 0, b: 0, a: 1.0 };\r\n        var backgroundColor = parameters.hasOwnProperty(\"backgroundColor\")\r\n            ? parameters[\"backgroundColor\"]\r\n            : { r: 255, g: 255, b: 255, a: 1.0 };\r\n        var textColor = parameters.hasOwnProperty(\"textColor\")\r\n            ? parameters[\"textColor\"]\r\n            : { r: 0, g: 0, b: 0, a: 1.0 };\r\n\r\n        var canvas = document.createElement(\"canvas\");\r\n        var context = canvas.getContext(\"2d\");\r\n        context.font = \"Bold \" + fontsize + \"px \" + fontface;\r\n        var metrics = context.measureText(message);\r\n        var textWidth = metrics.width;\r\n\r\n        context.fillStyle =\r\n            \"rgba(\" +\r\n            backgroundColor.r +\r\n            \",\" +\r\n            backgroundColor.g +\r\n            \",\" +\r\n            backgroundColor.b +\r\n            \",\" +\r\n            backgroundColor.a +\r\n            \")\";\r\n        context.strokeStyle =\r\n            \"rgba(\" +\r\n            borderColor.r +\r\n            \",\" +\r\n            borderColor.g +\r\n            \",\" +\r\n            borderColor.b +\r\n            \",\" +\r\n            borderColor.a +\r\n            \")\";\r\n\r\n        context.lineWidth = borderThickness;\r\n        this.roundRect(\r\n            context,\r\n            borderThickness / 2,\r\n            borderThickness / 2,\r\n            (textWidth + borderThickness) * 1.1,\r\n            fontsize * 1.4 + borderThickness,\r\n            8\r\n        );\r\n\r\n        context.fillStyle =\r\n            \"rgba(\" + textColor.r + \", \" + textColor.g + \", \" + textColor.b + \", 1.0)\";\r\n        context.fillText(message, borderThickness, fontsize + borderThickness);\r\n\r\n        var texture = new THREE.Texture(canvas);\r\n        texture.needsUpdate = true;\r\n\r\n        var spriteMaterial = new THREE.SpriteMaterial({\r\n            map: texture,\r\n            // useScreenCoordinates: false,\r\n        });\r\n        var sprite = new THREE.Sprite(spriteMaterial);\r\n        sprite.scale.set(0.5 * fontsize, 0.25 * fontsize, 0.75 * fontsize);\r\n        return sprite;\r\n    };\r\n\r\n    roundRect = (ctx, x, y, w, h, r) => {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x + r, y);\r\n        ctx.lineTo(x + w - r, y);\r\n        ctx.quadraticCurveTo(x + w, y, x + w, y + r);\r\n        ctx.lineTo(x + w, y + h - r);\r\n        ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\r\n        ctx.lineTo(x + r, y + h);\r\n        ctx.quadraticCurveTo(x, y + h, x, y + h - r);\r\n        ctx.lineTo(x, y + r);\r\n        ctx.quadraticCurveTo(x, y, x + r, y);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.stroke();\r\n    };\r\n\r\n    start = () => {\r\n        if (!this.frameId) {\r\n            this.frameId = requestAnimationFrame(this.animate);\r\n        }\r\n    };\r\n\r\n    stop = () => {\r\n        cancelAnimationFrame(this.frameId);\r\n    };\r\n\r\n    render_scene = () => {\r\n        if (this.renderer) this.renderer.render(this.scene, this.camera);\r\n        if (this.renderer2) this.renderer2.render(this.scene2, this.camera2);\r\n    };\r\n\r\n    moveCameraToOriginal = () => {\r\n        this.camera.position.set(this.camera_position);\r\n        this.camera.rotation.set(this.camera_rotation);\r\n        this.lookat_point.x = 0;\r\n        this.lookat_point.y = 0;\r\n        this.lookat_point.z = 0;\r\n        this.camera.lookAt(this.lookat_point);\r\n        this.controls.reset();\r\n    };\r\n\r\n    moveCameraLeft = () => {\r\n        this.camera.position.x = this.camera.position.x - 100;\r\n        this.lookat_point.x = this.lookat_point.x + 100;\r\n        this.camera.lookAt(this.lookat_point);\r\n    };\r\n\r\n    moveCameraRight = () => {\r\n        this.camera.position.x = this.camera.position.x + 100;\r\n        this.lookat_point.x = this.lookat_point.x - 100;\r\n        this.camera.lookAt(this.lookat_point);\r\n    };\r\n\r\n    handleLeftBtn = () => {\r\n        this.moveCameraLeft();\r\n    };\r\n\r\n    handleMiddleBtn = () => {\r\n        this.moveCameraToOriginal();\r\n    };\r\n\r\n    handleRightBtn = () => {\r\n        this.moveCameraRight();\r\n    };\r\n\r\n    render() {\r\n        const { width, height, options, onChange } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <div\r\n                    style={{ width: width, height: height }}\r\n                    ref={(ref) => {\r\n                        this.mount = ref;\r\n                    }}\r\n                >\r\n                    <GraphSelector options={options} onChange={onChange} />\r\n                    <SceneLegend />\r\n                    <ButtonGroup\r\n                        width={width}\r\n                        onClickLeftBtn={this.handleLeftBtn}\r\n                        onClickMiddleBtn={this.handleMiddleBtn}\r\n                        onClickRightBtn={this.handleRightBtn}\r\n                    />\r\n                    <div\r\n                        className=\"axes-helper\"\r\n                        ref={(ref) => {\r\n                            this.axesHelper = ref;\r\n                        }}\r\n                    />\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scene;\r\n","export default function brewNetworkInput(data, width, height) {\n    const width_int = parseInt(width) - 25;\n    const height_int = parseInt(height) - 25;\n    const nodes = data.node_positions.map((pos, idx) => ({\n        x: pos[0] * width_int + 10,\n        y: pos[1] * height_int + 15,\n        label: data.node_label[idx],\n    }));\n\n    const links = [];\n    for (let src_idx = 0; src_idx < data.adjacency_matrix.length; src_idx++) {\n        for (let tgt_idx = 0; tgt_idx < data.adjacency_matrix[0].length; tgt_idx++) {\n            if (src_idx > tgt_idx) continue;\n\n            if (data.adjacency_matrix[src_idx][tgt_idx])\n                links.push({ source: nodes[src_idx], target: nodes[tgt_idx] });\n        }\n    }\n\n    return { nodes, links };\n}\n","import React from \"react\";\nimport { Graph, DefaultLink } from \"@vx/network\";\n// import Graph from \"./vx_network/Graph\";\nimport brewNetworkInput from \"./vx_network/brewNetworkInput\";\n\nclass NetworkNode extends React.Component {\n    render() {\n        return <circle r={5} fill={\"#FFFFFF\"} />;\n    }\n}\n\nconst FlatGraphPlot = ({ graph, width, height }) => {\n    return (\n        <svg style={{ width: \"100%\", height: \"100%\" }}>\n            <Graph\n                graph={brewNetworkInput(graph, width, height)}\n                linkComponent={DefaultLink}\n                nodeComponent={NetworkNode}\n            />\n        </svg>\n    );\n};\n\nexport default FlatGraphPlot;\n","import { Group } from \"@vx/group\";\nimport { HeatmapCircle } from \"@vx/heatmap\";\n\nconst HeatMapCircle = ({\n    margin_top,\n    margin_left,\n    data,\n    xScale,\n    yScale,\n    colorScale,\n    opacityScale,\n    radius,\n    events = false,\n    onHover,\n}) => {\n    return (\n        <Group top={margin_top} left={margin_left}>\n            <HeatmapCircle\n                data={data}\n                xScale={(d) => xScale(d) ?? 0}\n                yScale={(d) => yScale(d) ?? 0}\n                colorScale={colorScale}\n                opacityScale={opacityScale}\n                radius={radius}\n                gap={2}\n            >\n                {(heatmap) =>\n                    heatmap.map((heatmapBins) =>\n                        heatmapBins.map((bin) => (\n                            <circle\n                                className=\"vx-heatmap-circle\"\n                                key={`heatmap-circle-${bin.row}-${bin.column}`}\n                                value={`${bin.row}-${bin.column}`}\n                                cx={bin.cx}\n                                cy={bin.cy}\n                                r={radius}\n                                fill={bin.color}\n                                fillOpacity={bin.opacity}\n                                onClick={(e) => {\n                                    if (!e) return;\n                                    const { row, column } = bin;\n                                    alert(JSON.stringify({ row, column, value: bin.bin.count }));\n                                }}\n                                onMouseEnter={onHover}\n                            />\n                        ))\n                    )\n                }\n            </HeatmapCircle>\n        </Group>\n    );\n};\n\nexport default HeatMapCircle;\n","import React from \"react\";\nimport { scaleLinear } from \"@vx/scale\";\nimport \"../css/StructureSimilarityHeatMap.css\";\nimport HeatMapCircle from \"./HeatMapCircle\";\n\nconst leftHotLow = \"#77312f\";\nconst leftHotHigh = \"#f33d15\";\nconst rightHotLow = \"#2F773B\";\nconst rightHotHigh = \"#1CF315\";\n// const selectedColor = \"#FFFFFF\";\nexport const background = \"#28272c\";\n\nconst leftCircleColorScale = scaleLinear({\n    range: [leftHotLow, leftHotHigh],\n    domain: [0, 1.0],\n});\nconst rightCircleColorScale = scaleLinear({\n    range: [rightHotLow, rightHotHigh],\n    domain: [0, 1.0],\n});\nconst opacityScale = scaleLinear({\n    range: [0.5, 1.0],\n    domain: [0, 1.0],\n});\n\nfunction min(data, value) {\n    return Math.min(...data.map(value));\n}\n\nexport function generateBin(data) {\n    return data.reverse().map((row, row_idx) => {\n        return {\n            bin: row_idx,\n            bins: row.map((col, col_idx) => {\n                return { bin: col_idx, count: col };\n            }),\n        };\n    });\n}\n\nconst defaultMargin = { top: 10, left: 20, right: 20, bottom: 50 };\n\nconst StructureSimilarityHeatMap = ({\n    width,\n    height,\n    onClick,\n    leftData = [[]],\n    rightData = [[]],\n    events = false,\n    margin = defaultMargin,\n    separation = 20,\n}) => {\n    const _width = parseInt(width);\n    const _height = parseInt(height);\n\n    const heatMapWidth = leftData.length;\n    const leftBins = generateBin(leftData);\n    const rightBins = generateBin(rightData);\n\n    // scales\n    const xScale = scaleLinear({\n        domain: [0, heatMapWidth],\n    });\n    const yScale = scaleLinear({\n        domain: [0, heatMapWidth],\n    });\n\n    // bounds\n    const size =\n        _width > margin.left + margin.right\n            ? _width - margin.left - margin.right - separation\n            : _width;\n    const xMax = size / 2;\n    const yMax = _height - margin.bottom - margin.top;\n\n    const binWidth = xMax / heatMapWidth;\n    const binHeight = yMax / heatMapWidth;\n    const radius = min([binWidth, binHeight], (d) => d) / 2;\n\n    xScale.range([0, xMax]);\n    yScale.range([yMax, 0]);\n\n    return _width < 380 ? null : (\n        <div className=\"heat-map-box\">\n            <svg width={_width} height={_height}>\n                <rect x={0} y={0} width={_width} height={_height} rx={14} fill={background} />\n                <HeatMapCircle\n                    margin_top={margin.top}\n                    margin_left={margin.left}\n                    data={leftBins}\n                    xScale={xScale}\n                    yScale={yScale}\n                    colorScale={leftCircleColorScale}\n                    opacityScale={opacityScale}\n                    radius={radius}\n                    onClick={onClick}\n                />\n                <HeatMapCircle\n                    margin_top={margin.top}\n                    margin_left={xMax + margin.left + separation}\n                    data={rightBins}\n                    xScale={xScale}\n                    yScale={yScale}\n                    colorScale={rightCircleColorScale}\n                    opacityScale={opacityScale}\n                    radius={radius}\n                    onClick={onClick}\n                />\n            </svg>\n            <div className=\"heat-map-title heat-map-left\">Structure Similarity</div>\n            <div className=\"heat-map-title heat-map-right\">Adjacency Matrix</div>\n        </div>\n    );\n};\n\nexport default StructureSimilarityHeatMap;\n","import React from \"react\";\nimport { scaleOrdinal } from \"@vx/scale\";\nimport { LegendItem, LegendLabel, LegendOrdinal } from \"@vx/legend\";\nimport \"../css/Legend.css\";\n\nconst legendGlyphSize = 15;\n\nexport default function ClassificationBarLegend({ label, color, events = false }) {\n    const ordinalColorScale = scaleOrdinal({\n        domain: label,\n        range: color,\n    });\n\n    return (\n        <div className=\"legend-position\">\n            <LegendBox title={null}>\n                <LegendOrdinal\n                    scale={ordinalColorScale}\n                    labelFormat={(label) => `${label.toUpperCase()}`}\n                >\n                    {(labels) => (\n                        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            {labels.map((label, i) => (\n                                <LegendItem\n                                    key={`legend-quantile-${i}`}\n                                    margin=\"0 5px\"\n                                    onClick={() => {\n                                        if (events) alert(`clicked: ${JSON.stringify(label)}`);\n                                    }}\n                                >\n                                    <svg width={legendGlyphSize} height={legendGlyphSize}>\n                                        <rect\n                                            fill={label.value}\n                                            width={legendGlyphSize}\n                                            height={legendGlyphSize}\n                                        />\n                                    </svg>\n                                    <LegendLabel align=\"left\" margin=\"0 0 0 4px\">\n                                        {label.text}\n                                    </LegendLabel>\n                                </LegendItem>\n                            ))}\n                        </div>\n                    )}\n                </LegendOrdinal>\n            </LegendBox>\n        </div>\n    );\n}\n\nfunction LegendBox({ title, children }) {\n    return (\n        <div className=\"legend-box\">\n            <div className=\"title-close\">{title}</div>\n            {children}\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Group } from \"@vx/group\";\nimport { BarGroup } from \"@vx/shape\";\nimport { AxisBottom } from \"@vx/axis\";\nimport { scaleBand, scaleLinear, scaleOrdinal } from \"@vx/scale\";\nimport ClassificationBarLegend from \"./ClassificationBarLegend\";\n\nconst blue = \"#aeeef8\";\nconst green = \"#e5fd3d\";\nconst purple = \"#9caff6\";\nconst barColor = [blue, green, purple];\nexport const background = \"#28272c\";\n\nconst defaultMargin = { top: 70, right: 20, bottom: 40, left: 0 };\nconst keys = [\"label\", \"y_hat\", \"y_logit\"];\nconst formatGraphClass = (graphClass) => \"0\" + graphClass;\n\n// accessors\nconst getGraphClass = (d) => d.graphClass;\n\n// scales\nconst yScale = scaleLinear({\n    domain: [0, 1.0],\n});\nconst x1Scale = scaleBand({\n    domain: keys,\n    padding: 0.1,\n});\nconst colorScale = scaleOrdinal({\n    domain: keys,\n    range: barColor,\n});\n\nfunction generateBarData(graph) {\n    return graph.y_hat.map((ele, idx) => {\n        return {\n            graphClass: idx,\n            label: graph.y === idx ? 1 : 0,\n            y_hat: ele,\n            y_logit: graph.y_logit[idx],\n        };\n    });\n}\n\nexport default function ClassificationBar({\n    width,\n    height,\n    graph,\n    events = false,\n    margin = defaultMargin,\n}) {\n    const _width = parseInt(width);\n    const _height = parseInt(height);\n\n    const data = generateBarData(graph);\n\n    const x0Scale = scaleBand({\n        domain: data.map(getGraphClass),\n        padding: 0.2,\n    });\n\n    const xMax = _width - margin.left - margin.right;\n    const yMax = _height - margin.top - margin.bottom;\n\n    // update scale output dimensions\n    x0Scale.rangeRound([0, xMax]);\n    x1Scale.rangeRound([0, x0Scale.bandwidth()]);\n    yScale.range([yMax, 0]);\n\n    return _width < 10 ? null : (\n        <React.Fragment>\n            <ClassificationBarLegend label={keys} color={barColor} />\n            <svg width={_width} height={_height}>\n                <rect x={0} y={0} width={_width} height={_height} fill={background} rx={14} />\n                <Group top={margin.top} left={margin.left}>\n                    <BarGroup\n                        data={data}\n                        keys={keys}\n                        height={yMax}\n                        x0={getGraphClass}\n                        x0Scale={x0Scale}\n                        x1Scale={x1Scale}\n                        yScale={yScale}\n                        color={colorScale}\n                    >\n                        {(barGroups) =>\n                            barGroups.map((barGroup) => (\n                                <Group\n                                    key={`bar-group-${barGroup.index}-${barGroup.x0}`}\n                                    left={barGroup.x0}\n                                >\n                                    {barGroup.bars.map((bar) => (\n                                        <rect\n                                            key={`bar-group-bar-${barGroup.index}-${bar.index}-${bar.value}-${bar.key}`}\n                                            x={bar.x}\n                                            y={bar.y}\n                                            width={bar.width}\n                                            height={bar.height}\n                                            fill={bar.color}\n                                            rx={4}\n                                            onClick={() => {\n                                                if (!events) return;\n                                                const { key, value } = bar;\n                                                alert(JSON.stringify({ key, value }));\n                                            }}\n                                        />\n                                    ))}\n                                </Group>\n                            ))\n                        }\n                    </BarGroup>\n                </Group>\n                <AxisBottom\n                    top={yMax + margin.top}\n                    tickFormat={formatGraphClass}\n                    scale={x0Scale}\n                    stroke={green}\n                    tickStroke={green}\n                    hideAxisLine\n                    tickLabelProps={() => ({\n                        fill: green,\n                        fontSize: 11,\n                        textAnchor: \"middle\",\n                    })}\n                />\n            </svg>\n        </React.Fragment>\n    );\n}\n","import React, { Component } from \"react\";\nimport GridLayout, { WidthProvider } from \"react-grid-layout\";\nimport \"../../node_modules/react-grid-layout/css/styles.css\";\nimport \"../../node_modules/react-resizable/css/styles.css\";\nimport \"../css/Grid.css\";\n\nimport GridWrapper from \"./GridWrapper\";\nimport Scene from \"./Scene\";\nimport FlatGraphPlot from \"./FlatGraphPlot\";\nimport StructureSimilarityHeatMap from \"./StructureSimilarityHeatMap\";\nimport ClassificationBar from \"./ClassificationBar\";\n\nconst AutoWidthGridLayout = WidthProvider(GridLayout);\n\nclass Grid extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            layout: [\n                { i: \"scene\", x: 0, y: 0, w: 1260, h: 8, static: true },\n                { i: \"graph\", x: 0, y: 8, w: 420, h: 4, minW: 2, maxW: 1260, minH: 2, maxH: 6 },\n                { i: \"heatmap\", x: 4, y: 8, w: 420, h: 4, minW: 2, maxW: 1260, minH: 2, maxH: 6 },\n                { i: \"bar\", x: 8, y: 8, w: 420, h: 4, minW: 2, maxW: 1260, minH: 2, maxH: 6 },\n                { i: \"anchor\", x: 0, y: 12, w: 1260, h: 0.01, static: true },\n            ],\n            // structSimilarityBin: generateBin(selectedGraph.struct_simialrity),\n            // adjacencyMatrixBin: generateBin(selectedGraph.adjacency_matrix),\n        };\n    }\n\n    // handleHeatMapHover = ({ target }) => {\n    //     const idx_text = target.attributes.value.nodeValue.toString();\n    //     const indice = idx_text.split(\"-\").map((ele) => parseInt(ele));\n\n    //     const { structSimilarityBin, adjacencyMatrixBin } = this.state;\n\n    //     structSimilarityBin[indice[0]][indice[1]].selected = true;\n    //     adjacencyMatrixBin[indice[0]][indice[1]].selected = true;\n    //     this.setState({ structSimilarityBin, adjacencyMatrixBin });\n    // };\n\n    render() {\n        const { graphKeys, selectedGraphKey, selectedGraph, onChangeGraphSelector } = this.props;\n        const { layout } = this.state;\n\n        return (\n            <React.Fragment>\n                <AutoWidthGridLayout\n                    className=\"layout\"\n                    layout={layout}\n                    cols={window.innerWidth - 20}\n                    rowHeight={50}\n                    compactType={\"horizontal\"}\n                    verticalCompact={true}\n                >\n                    <GridWrapper key=\"scene\">\n                        <Scene\n                            selectedGraphKey={selectedGraphKey}\n                            selectedGraph={selectedGraph}\n                            options={graphKeys}\n                            onChange={onChangeGraphSelector}\n                        />\n                    </GridWrapper>\n                    <GridWrapper key=\"graph\">\n                        <FlatGraphPlot graph={selectedGraph} />\n                    </GridWrapper>\n                    <GridWrapper key=\"heatmap\">\n                        <StructureSimilarityHeatMap\n                            leftData={selectedGraph.struct_similarity}\n                            rightData={selectedGraph.adjacency_matrix}\n                            onHover={() => {}}\n                        />\n                    </GridWrapper>\n                    <GridWrapper key=\"bar\">\n                        <ClassificationBar graph={selectedGraph} />\n                    </GridWrapper>\n                    <GridWrapper key=\"anchor\">\n                        <div className=\"grid-anchor\" />\n                    </GridWrapper>\n                </AutoWidthGridLayout>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport \"./css/App.css\";\nimport Grid from \"./component/Grid\";\nimport Graphs from \"./data/ENZYMES_details.json\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const defaultGraphKey = \"train_1\";\n        this.state = {\n            selectedGraphKey: defaultGraphKey,\n        };\n    }\n\n    onChangeGraphSelector = ({ currentTarget }) => {\n        const selectedGraphKey = currentTarget.value;\n        this.setState({\n            selectedGraphKey: selectedGraphKey,\n        });\n    };\n\n    render() {\n        const { selectedGraphKey } = this.state;\n        return (\n            <div className=\"App\">\n                <Grid\n                    graphKeys={Object.keys(Graphs)}\n                    selectedGraphKey={selectedGraphKey}\n                    selectedGraph={Graphs[selectedGraphKey]}\n                    onChangeGraphSelector={this.onChangeGraphSelector}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}